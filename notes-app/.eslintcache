[{"D:\\Web Development\\React-Notes-App\\notes-app\\src\\index.js":"1","D:\\Web Development\\React-Notes-App\\notes-app\\src\\reportWebVitals.js":"2","D:\\Web Development\\React-Notes-App\\notes-app\\src\\App.js":"3","D:\\Web Development\\React-Notes-App\\notes-app\\src\\components\\Wrapper.js":"4","D:\\Web Development\\React-Notes-App\\notes-app\\src\\components\\Library.js":"5","D:\\Web Development\\React-Notes-App\\notes-app\\src\\components\\Editor.js":"6","D:\\Web Development\\React-Notes-App\\notes-app\\src\\components\\Note.js":"7","D:\\Web Development\\React-Notes-App\\notes-app\\src\\components\\NoteList.js":"8","D:\\Web Development\\React-Notes-App\\notes-app\\src\\components\\Loader.js":"9","D:\\Web Development\\React-Notes-App\\notes-app\\src\\components\\Info.js":"10"},{"size":478,"mtime":1611769386362,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":790,"mtime":1612016156173,"results":"14","hashOfConfig":"12"},{"size":3763,"mtime":1612015942443,"results":"15","hashOfConfig":"12"},{"size":3217,"mtime":1611947427556,"results":"16","hashOfConfig":"12"},{"size":4466,"mtime":1611955807101,"results":"17","hashOfConfig":"12"},{"size":1773,"mtime":1611949984883,"results":"18","hashOfConfig":"12"},{"size":1369,"mtime":1611947496647,"results":"19","hashOfConfig":"12"},{"size":819,"mtime":1612016275433,"results":"20","hashOfConfig":"12"},{"size":1283,"mtime":1612016199912,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1p2f9uq",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Web Development\\React-Notes-App\\notes-app\\src\\index.js",[],["47","48"],"D:\\Web Development\\React-Notes-App\\notes-app\\src\\reportWebVitals.js",[],"D:\\Web Development\\React-Notes-App\\notes-app\\src\\App.js",["49"],"D:\\Web Development\\React-Notes-App\\notes-app\\src\\components\\Wrapper.js",["50","51"],"D:\\Web Development\\React-Notes-App\\notes-app\\src\\components\\Library.js",["52","53","54","55"],"import { useState, useEffect } from 'react';\r\nimport { FaRegEdit } from 'react-icons/fa';\r\nimport NoteList from './NoteList.js';\r\nimport Note from './Note';\r\n\r\nfunction Library({noteList, setNoteList, setEditorTitle, setEditorDate, setEditorText }){\r\n\r\n    const currentDate = () => {\r\n        let today = new Date();\r\n        let dd = String(today.getDate()).padStart(2, '0');\r\n        let MM = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        let yyyy = today.getFullYear();\r\n        let hh = String(today.getHours()).padStart(2, '0');\r\n        let mm = String(today.getMinutes()).padStart(2, '0');\r\n        let ss = String(today.getSeconds()).padStart(2, '0');\r\n        return `${yyyy}/${MM}/${dd} - ${hh}:${mm}:${ss}`;\r\n    }\r\n\r\n    const createNote = () => {\r\n        let [title, date, noteText, isActive] = ['New note', currentDate(), 'Type here your notes', 'note active'];\r\n        let newNote = (<Note \r\n                            title={title}\r\n                            createdAt={date}\r\n                            noteText={noteText}\r\n                            dateForSort={new Date()}\r\n                            isActive={isActive}\r\n                            noteList={noteList}\r\n                            setNoteList={setNoteList}\r\n                            setEditorTitle={setEditorTitle}\r\n                            setEditorDate={setEditorDate}\r\n                            setEditorText={setEditorText}\r\n                         />)\r\n        let unselectedNoteList = noteList != undefined \r\n            ? noteList.sort((n1, n2) => n2.props.dateForSort - n1.props.dateForSort).map(note => {\r\n                return <Note \r\n                            key={note.key}\r\n                            title={note.props.title}\r\n                            createdAt={note.props.createdAt}\r\n                            noteText={note.props.noteText}\r\n                            dateForSort={note.props.dateForSort}\r\n                            isActive='note'\r\n                            listID={note.props.listID}\r\n                            noteList={note.props.noteList}\r\n                            setNoteList={note.props.setNoteList}\r\n                            setEditorTitle={note.props.setEditorTitle}\r\n                            setEditorDate={note.props.setEditorDate}\r\n                            setEditorText={note.props.setEditorText}\r\n                        />\r\n            }) \r\n            : null;\r\n\r\n        //Update components\r\n        setNoteList(noteList != undefined ? [newNote, ...unselectedNoteList] : [newNote])\r\n        setEditorTitle(title);\r\n        setEditorDate(date);\r\n        setEditorText(noteText);\r\n    }\r\n\r\n    const ListOfNotes = (noteList) => {\r\n        if (noteList){\r\n            return <NoteList noteList={noteList} setNoteList={setNoteList} />\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div id=\"library\">\r\n            <div id=\"library-header\">\r\n                <h1>Notes</h1>\r\n                <FaRegEdit id=\"library-edit-btn\" onClick={createNote} />\r\n            </div>\r\n            <ListOfNotes noteList={noteList} />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Library;","D:\\Web Development\\React-Notes-App\\notes-app\\src\\components\\Editor.js",["56","57"],"import { FaTrashAlt } from 'react-icons/fa';\r\nimport Note from './Note'\r\n\r\nfunction Editor({editorTitle, editorDate, editorText, setEditorTitle, setEditorText, setEditorDate, noteList, setNoteList}){\r\n    \r\n    const changeTitle = (e) => {\r\n        setEditorTitle(e.target.value)\r\n        const changedTitleList = noteList.map(note =>{\r\n            return <Note\r\n                key={note.key}\r\n                title={(note.props.isActive === \"note active\") ? e.target.value : note.props.title}\r\n                createdAt={note.props.createdAt}\r\n                noteText={note.props.noteText}\r\n                dateForSort={note.props.dateForSort}\r\n                isActive={(note.props.isActive === \"note active\") ? 'note active' : 'note'}\r\n                listID={note.props.listID}\r\n                noteList={note.props.noteList}\r\n                setNoteList={note.props.setNoteList}\r\n                setEditorTitle={note.props.setEditorTitle}\r\n                setEditorDate={note.props.setEditorDate}\r\n                setEditorText={note.props.setEditorText}\r\n            />\r\n        })\r\n        setNoteList(changedTitleList)\r\n    }\r\n\r\n    const changeText = (e) => {\r\n        setEditorText(e.target.value)\r\n        const changedTextList = noteList.map(note =>{\r\n            return <Note\r\n                key={note.key}\r\n                title={note.props.title}\r\n                createdAt={note.props.createdAt}\r\n                noteText={(note.props.isActive === \"note active\") ? e.target.value : note.props.noteText}\r\n                dateForSort={note.props.dateForSort}\r\n                isActive={(note.props.isActive === \"note active\") ? 'note active' : 'note'}\r\n                listID={note.props.listID}\r\n                noteList={note.props.noteList}\r\n                setNoteList={note.props.setNoteList}\r\n                setEditorTitle={note.props.setEditorTitle}\r\n                setEditorDate={note.props.setEditorDate}\r\n                setEditorText={note.props.setEditorText}\r\n            />\r\n        })\r\n        setNoteList(changedTextList)\r\n    }\r\n\r\n    const deleteNote = (e) => {\r\n        //Get active note index\r\n        let c;\r\n        noteList.sort((e1, e2) => e2.props.createdAt - e1.props.createdAt).forEach((note, i) => {\r\n            if (note.props.isActive === 'note active'){\r\n                c = i;\r\n            }\r\n        });\r\n        c = (c === 0) ? c : (c - 1);\r\n\r\n        //Update editor states\r\n        let [newTitle, newDate, newText] = [];\r\n        noteList.sort((e1, e2) => e2.props.createdAt - e1.props.createdAt).forEach((note, i) => {\r\n            if (i === c){\r\n                [newTitle, newDate, newText] = [note.props.title, note.props.createdAt, note.props.newText]\r\n            }\r\n        })\r\n        setEditorTitle((noteList.length === 1) ? '' : newTitle)\r\n        setEditorDate((noteList.length === 1) ? '' : newDate)\r\n        setEditorText((noteList.length === 1) ? '' : newText)\r\n\r\n        //Update noteList state by removing active note\r\n        setNoteList(noteList.sort((e1, e2) => e2.props.dateForSort - e1.dateForSort).filter((note, i) => {\r\n            if (note.props.isActive != 'note active'){\r\n                return note;\r\n            } \r\n        }).map((note, i) => {\r\n            return <Note \r\n                        key={note.key}\r\n                        title={note.props.title}\r\n                        createdAt={note.props.createdAt}\r\n                        noteText={note.props.noteText}\r\n                        dateForSort={note.props.dateForSort}\r\n                        isActive={(i === c) ? 'note active' : 'note'}\r\n                        listID={note.props.listID}\r\n                        noteList={note.props.noteList}\r\n                        setNoteList={note.props.setNoteList}\r\n                        setEditorTitle={note.props.setEditorTitle}\r\n                        setEditorDate={note.props.setEditorDate}\r\n                        setEditorText={note.props.setEditorText}\r\n                    />\r\n        }))\r\n    }\r\n\r\n    return(\r\n        <div id=\"editor\">\r\n            <div id=\"editor-header\">\r\n                <textarea rows=\"1\" value={editorTitle} onChange={changeTitle} ></textarea>\r\n                <h5>{editorDate}</h5>\r\n                <FaTrashAlt id=\"editor-delete-btn\" onClick={deleteNote}/>\r\n            </div>  \r\n            <textarea id=\"editor-main-editor\" value={editorText} onChange={changeText}></textarea>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Editor;","D:\\Web Development\\React-Notes-App\\notes-app\\src\\components\\Note.js",["58"],"function Note({title, createdAt, noteText, isActive, listID, noteList, setNoteList, setEditorTitle, setEditorDate, setEditorText }){\r\n    \r\n    const changeActiveNote = (e) => {\r\n        let index = e.target.dataset.listid;\r\n        let eTitle = noteList[index].props.title;      \r\n        let eDate = noteList[index].props.createdAt;      \r\n        let eText = noteList[index].props.noteText;      \r\n        let reselectedNoteList = noteList.map((note, i) => {\r\n            return <Note\r\n                        key={note.key}\r\n                        title={note.props.title}\r\n                        createdAt={note.props.createdAt}\r\n                        noteText={note.props.noteText}\r\n                        dateForSort={note.props.dateForSort}\r\n                        isActive={(i == index) ? 'note active' : 'note'}\r\n                        listID={note.props.listID}\r\n                        noteList={note.props.noteList}\r\n                        setNoteList={note.props.setNoteList}\r\n                        setEditorTitle={note.props.setEditorTitle}\r\n                        setEditorDate={note.props.setEditorDate}\r\n                        setEditorText={note.props.setEditorText}\r\n                    />\r\n        })\r\n\r\n        //Update states\r\n        setNoteList(reselectedNoteList)\r\n        setEditorTitle(eTitle)\r\n        setEditorDate(eDate)\r\n        setEditorText(eText)\r\n    }\r\n\r\n    return(\r\n        <div className={isActive} data-listid={listID} onClick={changeActiveNote} >\r\n            <h1>{(title.length > 20) ? title.substring(0,20).concat('...') : title}</h1>\r\n            <h5>{createdAt}</h5>\r\n            <p>{(noteText.length > 20) ? noteText.substring(0,20).concat('...') : noteText }</p>\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default Note;","D:\\Web Development\\React-Notes-App\\notes-app\\src\\components\\NoteList.js",["59"],"import Note from './Note.js';\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\nfunction NoteList(noteList, setNoteList){\r\n    \r\n    const NoteListComp = (noteList) => {\r\n        if (noteList.noteList.noteList.noteList != undefined) {\r\n            let newNoteList = noteList.noteList.noteList.noteList.sort((n1, n2) => n2.props.dateForSort - n1.props.dateForSort).map((note, i) => {\r\n                return <Note \r\n                            key={uuidv4()}\r\n                            title={note.props.title}\r\n                            createdAt={note.props.createdAt}\r\n                            noteText={note.props.noteText}\r\n                            isActive={note.props.isActive}\r\n                            listID={i}\r\n                            noteList={noteList.noteList.noteList.noteList}\r\n                            setNoteList={note.props.setNoteList}\r\n                            setEditorTitle={note.props.setEditorTitle}\r\n                            setEditorDate={note.props.setEditorDate}\r\n                            setEditorText={note.props.setEditorText}\r\n                        />\r\n            })\r\n            return newNoteList;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"library-notes\">\r\n            <NoteListComp noteList={noteList} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoteList;","D:\\Web Development\\React-Notes-App\\notes-app\\src\\components\\Loader.js",[],"D:\\Web Development\\React-Notes-App\\notes-app\\src\\components\\Info.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":8,"nodeType":"66","messageId":"67","endLine":1,"endColumn":13},{"ruleId":"68","severity":1,"message":"69","line":19,"column":47,"nodeType":"70","messageId":"71","endLine":19,"endColumn":49},{"ruleId":"68","severity":1,"message":"69","line":62,"column":42,"nodeType":"70","messageId":"71","endLine":62,"endColumn":44},{"ruleId":"64","severity":1,"message":"72","line":1,"column":10,"nodeType":"66","messageId":"67","endLine":1,"endColumn":18},{"ruleId":"64","severity":1,"message":"73","line":1,"column":20,"nodeType":"66","messageId":"67","endLine":1,"endColumn":29},{"ruleId":"68","severity":1,"message":"69","line":33,"column":43,"nodeType":"70","messageId":"71","endLine":33,"endColumn":45},{"ruleId":"68","severity":1,"message":"69","line":53,"column":30,"nodeType":"70","messageId":"71","endLine":53,"endColumn":32},{"ruleId":"74","severity":1,"message":"75","line":70,"column":103,"nodeType":"76","messageId":"77","endLine":70,"endColumn":105},{"ruleId":"68","severity":1,"message":"69","line":71,"column":37,"nodeType":"70","messageId":"71","endLine":71,"endColumn":39},{"ruleId":"68","severity":1,"message":"78","line":15,"column":38,"nodeType":"70","messageId":"71","endLine":15,"endColumn":40},{"ruleId":"68","severity":1,"message":"69","line":7,"column":49,"nodeType":"70","messageId":"71","endLine":7,"endColumn":51},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'style' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useState' is defined but never used.","'useEffect' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]